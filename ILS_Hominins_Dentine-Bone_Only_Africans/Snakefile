###### CONDA ENVIRONMENT for Slim Tree: conda install -c conda-forge -c bioconda biopython slim==3.6 matplotlib-base pandas numpy java-jdk c-compiler snakemake biopython
###### Requires GitClone SlimTree


import os
import random
import os.path
from os import listdir
from os.path import isfile, join, isdir

from Bio import SeqIO
################################################################################################################################################################################################################################################################################################################################################
################################################################### USEFULL FUNCTIONS



################################################################################################################ SET UP ################################################################################################################################################################################################################################

SAMPLES=[]
PROTEIN_NUBMER_TO_REPS={}
INPUT_LIST_FILE=open('Input_File.txt','r')


Subset_File=open('Protein_Subset','r')
Protein_Subset=[]
for line in Subset_File:
    line=line.strip()
    Protein_Subset.append(line)



for line in INPUT_LIST_FILE:
    line=line.strip().split()

    PROTEIN_NUBMER_TO_REPS[int(line[0])]=int(line[1])

for J,K in PROTEIN_NUBMER_TO_REPS.items():
    for rep in range(0,K):
        SAMPLES.append(F'REP-{rep}_{J}-PROTEINS')

SAMPLES=list(set(SAMPLES))


############################################################################################################################################################################################################################################################



############################################################################################################################################################################################################################################################



###### One Rule to Rule them ALL

rule all:
    input:
        "Input_File.txt",
        File_of_Proteins=expand('Protein_Samples/{SAMPLE}/Proteins.txt',SAMPLE=SAMPLES),
        Fasta_File_of_Proteins=expand('Protein_Samples/{SAMPLE}/{SAMPLE}_PROT_REFERENCE.fa',SAMPLE=SAMPLES),
        Datasets_txt='Dataset_Analysis/Datasets.txt',
        Datasets_Prepared_for_Trees=expand('Dataset_Analysis/Workspace/1_OG_Dataset/{SAMPLE}_PROT_REFERENCE.fa',SAMPLE=SAMPLES),
        
        
        
        
        
        
        
        
        
        

######################################################################################################################
#### Step 0 - For every SAMPLE, create a folder, pick randomly that number of proteins


#### Step 0
rule Create_Folder_Pick_Proteins:
    input:
        'Input_File.txt'
    output:
        'Protein_Samples/{sample}/Proteins.txt'
    run:
        Choices=[]
        Number_of_Proteins=wildcards.sample.split('_')[1]
        Number_of_Proteins=int(Number_of_Proteins.split('-')[0]) ### How many proteins I need
        
        shell(F'rm -rf Protein_Samples/{wildcards.sample}')
        shell(F'mkdir Protein_Samples/{wildcards.sample}')
        shell(F'touch Protein_Samples/{wildcards.sample}/Proteins.txt')
        
        ######## If user has provided a subset of proteins they want to pick from
        if Protein_Subset!=['']:
            Possible_Proteins=len(Protein_Subset) ### how many proteins can I choose from
            
            
            Possible_Index=[x for x in range(0,Possible_Proteins)]
            

            
            if (Number_of_Proteins>Possible_Proteins): ### With replacement, if there are not enough proteins available to pick from
                Pick_Ind=random.choices(Possible_Index,k=Number_of_Proteins)
                
            else: ### Without replacement
                Pick_Ind=random.sample(Possible_Index, Number_of_Proteins)
        
            
            Picked_Proteins=[Protein_Subset[x] for x in Pick_Ind]
    
    
    
    
    
    
        ###### If the user has not provided a subset of proteins they want to pick from
        if Protein_Subset==['']:

            mypath='./PER_PROTEIN/'
            Files = [f for f in listdir(mypath) if isfile(join(mypath, f))]
            Available_Proteins=[ x.split('_PROT_REFERENCE.fa')[0] for x in Files]
            
            Pick_Ind=random.choices([x for x in range(0,len(Available_Proteins))], k=Number_of_Proteins)
        
            Picked_Proteins=[Available_Proteins[x] for x in Pick_Ind]
            
        for prtn in Picked_Proteins:
            shell(F'echo "{prtn}" >> Protein_Samples/{wildcards.sample}/Proteins.txt')
            
    





######################################################################################################################
#### Step 1 - For every SAMPLE, create a fasta file that contains 1 sample from each hominid group (Pongo,Pan, Gorilla, Homo1, Homo2) and for each protein 
########## Does NOT allow for duplicates, e.g. if requesting 2 proteins and only 1 is in the list, it will only select 1 protein !!!!

### Step 1
    
rule Create_Protein_Dataset_Fasta_File:
    input:
        'Protein_Samples/{sample}/Proteins.txt'
    output:
        'Protein_Samples/{sample}/{sample}_PROT_REFERENCE.fa'
    run:
        shell(F'rm -rf Protein_Samples/{wildcards.sample}/{wildcards.sample}_PROT_REFERENCE.fa')
        shell(F'python3 Scripts/Sort_Data_For_ILS_Calc.py Protein_Samples/{wildcards.sample}/')

   

rule Create_Datasets_txt:
    input:
        expand('Protein_Samples/{SAMPLE}/{SAMPLE}_PROT_REFERENCE.fa',SAMPLE=SAMPLES),
    output:
        'Dataset_Analysis/Datasets.txt'
    run:
        shell('rm -rf Dataset_Analysis/Datasets.txt')
        shell('echo Dataset Ancient_Samples > Dataset_Analysis/Datasets.txt')

    
rule Prepare_Data_For_Trees:
    input:
        'Protein_Samples/{sample}/{sample}_PROT_REFERENCE.fa',
        'Dataset_Analysis/Datasets.txt'
    output:
        'Dataset_Analysis/Workspace/1_OG_Dataset/{sample}_PROT_REFERENCE.fa',
        
    run:
        shell(F'cp Protein_Samples/{wildcards.sample}/{wildcards.sample}_PROT_REFERENCE.fa Dataset_Analysis/Workspace/1_OG_Dataset/{wildcards.sample}_PROT_REFERENCE.fa')
        shell(F'echo {wildcards.sample}_PROT_REFERENCE.fa   HUM >> Dataset_Analysis/Datasets.txt')
        